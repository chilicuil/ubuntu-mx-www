#!/usr/bin/env sh

trap _cleanup INT QUIT #trap ctrl-c

site="https://github.com/chilicuil/ubuntu-mx-www"
updates="https://raw2.github.com/chilicuil/ubuntu-mx-www/master/deploy"
web="/var/www"
gitweb="/srv"
errorfile="/tmp/deploy.$$.error"

#default apps
apps_install="git-core apache2 php5 libapache2-mod-php5 php5-mcrypt php5-pgsql
php5-suhosin php5-gd libgd2-xpm libjpeg-turbo8 libjpeg8 mysql-server mysql-client
php5-mysql php5-curl php5-json php5-dev php-pear"

##################
#general functions
##################

_printfl()
{   #print lines
    _printfl_var_max_len="80"
    if [ -n "$1" ]; then
        _printfl_var_word_len=$(expr ${#1} + 2)
        _printfl_var_sub=$(expr $_printfl_var_max_len - $_printfl_var_word_len)
        _printfl_var_half=$(expr $_printfl_var_sub / 2)
        _printfl_var_other_half=$(expr $_printfl_var_sub - $_printfl_var_half)
        printf "%b" "\033[1m" #white strong
        printf '%*s' "$_printfl_var_half" '' | tr ' ' -
        printf "%b" "\033[7m" #white background
        printf " %s " "$1"
        printf "%b" "\033[0m\033[1m" #white strong
        printf '%*s' "$_printfl_var_other_half" '' | tr ' ' -
        printf "%b" "\033[0m" #back to normal
        printf "\\n"
    else
        printf "%b" "\033[1m" #white strong
        printf '%*s' "$_printfl_var_max_len" '' | tr ' ' -
        printf "%b" "\033[0m" #back to normal
        printf "\\n"
    fi
}

_printfs()
{   #print step
    [ -z "$1" ] && return 1
    printf "%s\\n" "[+] $*"
}

_printfc()
{   #print command
    [ -z "$1" ] && return 1
    printf "%s\\n" "    $ $*"
}

_animcui()
{   #wait animation
    [ -z "$1" ] && { printf "%5s\n" ""; return 1; }

    if ! printf "%s" "$1" | grep -v "[^0-9]" >/dev/null; then
        printf "%5s\n" ""
        return 1; 
    fi

    _animcui_var_pid="$1"
    _animcui_var_animation_state="1"

    if [ ! "$(ps -p "$_animcui_var_pid" -o comm=)" ]; then
        printf "%5s\n" ""
        return 1
    fi

    printf "%5s" ""

    while [ "$(ps -p "$_animcui_var_pid" -o comm=)" ]; do
        printf "%b" "\b\b\b\b\b"
        case "$_animcui_var_animation_state" in
            1)
                printf "%s" '\o@o\'
                _animcui_var_animation_state=2
                ;;
            2)
                printf "%s" '|o@o|'
                _animcui_var_animation_state=3
                ;;
            3)
                printf "%s" '/o@o/'
                _animcui_var_animation_state=4
                ;;
            4)
                printf "%s" '|o@o|'
                _animcui_var_animation_state=1
                ;;
        esac
        sleep 1
    done
    printf "%b" "\b\b\b\b\b" && printf "%5s\n" ""
}

_die()
{   #print a stacktrace with a msg and exit
    if [ -n "$BASH" ]; then
        _die_var_frame=0
        while caller $_die_var_frame; do
            _die_var_frame=$(expr $_die_var_frame + 1);
        done
    fi

    printf "%s\\n" "$*"
    exit
}

_distro()
{   #return distro name in a lower string
    _distro_var_DIST_INFO="/etc/lsb-release"
    if [ -r "$_distro_var_DIST_INFO" ]; then
        . "$_distro_var_DIST_INFO"
    fi

    if [ -z "$DISTRIB_ID" ]; then
        _distro_var_DISTRIB_ID="Unknown";
        if [ -f /etc/arch-release ]; then
            _distro_var_DISTRIB_ID="Arch"
        elif [ -r /etc/knoppix-version ]; then
            _distro_var_DISTRIB_ID="Knoppix"
        elif [ -r /etc/sidux-version ]; then
            _distro_var_DISTRIB_ID="Sidux"
        elif [ -r /etc/debian_version ]; then
            _distro_var_DISTRIB_ID="Debian"
        elif [ -r /etc/issue ]; then
            _distro_var_DISTRIB_ID=$(cat /etc/issue.net | awk '{print $1}')
            if [ X"$_distro_var_DISTRIB_ID" = X"Ubuntu" ]; then
                _distro_var_DISTRIB_ID="Ubuntu"
            fi
        elif [ -r /etc/gentoo-release ]; then
            _distro_var_DISTRIB_ID="Gentoo"
        elif [ -f /etc/lfs-version ]; then
            _distro_var_DISTRIB_ID="LFS"
        elif [ -r /etc/pclinuxos-release ]; then
            _distro_var_DISTRIB_ID="PCLinuxOS"
        elif [ -f /etc/mandriva-release ] || [ -f /etc/mandrake-release ]; then
            _distro_var_DISTRIB_ID="Mandriva"
        elif [ -f /etc/redhat-release ]; then
            _distro_var_DISTRIB_ID="RedHat"
        elif [ -f /etc/fedora-release ]; then
            _distro_var_DISTRIB_ID="Fedora"
        elif [ -r /etc/vector-version ]; then
            _distro_var_DISTRIB_ID="VectorLinux"
        elif [ -r /etc/slackware-version ]; then
            _distro_var_DISTRIB_ID="$(cat /etc/slackware-version)"
        elif [ -f /etc/release ]; then
            _distro_var_DISTRIB_ID="Solaris"
        elif [ -r /etc/SuSE-release ]; then
            _distro_var_DISTRIB_ID="$(grep -i suse /etc/SuSE-release)"
        elif [ -f /etc/yellowdog-release ]; then
            _distro_var_DISTRIB_ID="YellowDog Linux"
        elif [ -f /etc/zenwalk-version  ]; then
            _distro_var_DISTRIB_ID="Zenwalk"
        fi
        printf "%s\\n" "$_distro_var_DISTRIB_ID" | \
            tr 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' 'abcdefghijklmnopqrstuvwxyz'
    else
        printf "%s\\n" "$DISTRIB_ID" | \
            tr 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' 'abcdefghijklmnopqrstuvwxyz'
    fi
}

_supported()
{   #retun 0 on a supported system, 1 otherwise
    supported="[Debian|Ubuntu]"
    _supported_var_distro="$(_distro)"
    case "$_supported_var_distro" in
        ubuntu|debian) return 0 ;;
    esac
    return 1
}

_cmd()
{   #print and execute a command, exit on fail
    [ -z "$1" ] && return 1

    printf "%s \\n" "    $ $*"
    _cmd_var_output="$(eval $@ 2>&1)"
    _cmd_var_status="$?"

    if [ X"$_cmd_var_status" != X"0" ]; then
        printf "> %s:%s" "$*" "$_cmd_var_output"
        exit "$_cmd_var_status"
    else
        return "$_cmd_var_status"
    fi
}

_cmdsudo()
{   #print && execute a command, exit on fail
    [ -z "$1" ] && return 1

    printf "%s \\n" "    $ sudo $*"
    _cmdsudo_var_output=$(printf "%s\\n" "$sudopwd" | $sudocmd sh -c "eval $*" 2>&1)
    _cmdsudo_var_status="$?"

    if [ X"$_cmdsudo_var_status" != X"0" ]; then
        printf "> %s:%s\\n" "$*" "$_cmdsudo_var_output"
        exit "$_cmdsudo_var_status"
    else
        return "$_cmdsudo_var_status";
    fi
}

_waitfor()
{   #print, execute and wait for a command to finish
    [ -z "$1" ] && return 1

    printf "%s " "    $ $@ ..."
    eval "$@" >/dev/null 2>&1 &
    sleep 1s

    _animcui $(pidof "$1")
}

_waitforsudo()
{   #print, execute and wait for a command to finish
    [ -z "$1" ] && return 1

    printf "%s " "    $ sudo $@ ..."
    printf "%s\\n" "$sudopwd" | $sudocmd sh -c "eval $*" >/dev/null 2>&1 &
    sleep 1s

    if [ X"$1" = X"DEBIAN_FRONTEND=noninteractive" ]; then
        _animcui $(pidof "$2")
    else
        _animcui $(pidof "$1")
    fi
}

_smv()
{   #move files, create backups before overriding 
    [ -z "$1" ] && return 1 || _smv_var_origin_basename="$(basename "$1")"
    [ -z "$2" ] && return 1

    if [ X"$_smv_var_origin_basename" = X"." ] || \
       [ X"$_smv_var_origin_basename" = X".." ]; then
        return 1
    fi

    if [ -e "$2"/"$_smv_var_origin_basename" ]; then
        if diff -qr "$1" "$2"/"$_smv_var_origin_basename" >/dev/null 2>&1; then
            return 0
        fi
    else
        if diff -qr "$1" "$2" >/dev/null 2>&1; then
            return 0
        fi
    fi

    _smv_var_owner=$(stat -c %U "$2")
    _smv_var_version=$(date +"%d-%m-%Y-[%H:%M]")

    _printfc "mv $1 $2"

    if [ X"$_smv_var_owner" != X"$LOGNAME" ]; then
        #if target has a file with the same name as origin
        if [ -e "$2"/"$_smv_var_origin_basename" ]; then
            printf "%s\\n" "$sudopwd" | $sudocmd mv "$2"/"$_smv_var_origin_basename" \
                "$2"/"$_smv_var_origin_basename".old."$_smv_var_version" \
                >/dev/null 2>&1
            printf "%s\\n" "$sudopwd" | $sudocmd chown -R "$_smv_var_owner" \
                "$2"/"$_smv_var_origin_basename".old."$_smv_var_version" \
                >/dev/null 2>&1
        fi
        printf "%s\\n" "$sudopwd" | $sudocmd mv "$1" "$2" >/dev/null 2>&1
        printf "%s\\n" "$sudopwd" | $sudocmd chown -R "$_smv_var_owner":"$_smv_var_owner" \
                $2 >/dev/null 2>&1
    else
        if [ -e "$2"/"$_smv_var_origin_basename" ]; then 
            mv "$2"/"$_smv_var_origin_basename" \
               "$2"/"$_smv_var_origin_basename".old."$_smv_var_version"
        fi
        mv "$1" "$2"
    fi
}

_getroot()
{   #get sudo's password, define $sudopwd and $sudocmd
    if [ ! X"$LOGNAME" = X"root" ]; then
        printf "%s\\n" "Detecting user $LOGNAME (non-root) ..."
        printf "%s\\n" "Checking if sudo is available ..."

        if command -v "sudo" >/dev/null 2>&1; then
            sudo -K

            if [ -n "$sudopwd" ]; then
                # password check
                _getroot_var_test=$(printf "%s\\n" "$sudopwd" | sudo -S ls 2>&1)
                _getroot_var_status="$?"
                _getroot_var_not_allowed=$(printf "%s" "$_getroot_var_test" | \
                                         grep -i "sudoers")

                if [ -n "$_getroot_var_not_allowed" ]; then
                    printf "%s %s\\n" "You're not allowed to use sudo," \
                    "get in contact with your local administrator"
                    exit
                fi 

                if [ X"$_getroot_var_status" != X"0" ]; then
                    sudopwd=""
                    printf "%s\\n" "Incorrect preseed password"
                    exit
                else
                    sudocmd="sudo -S"
                fi 
                printf "%s\\n" "    - all set ..."
                return 0
            fi

            i=0 ; while [ "$i" -lt 3 ]; do
                i=$(expr $i + 1);
                printf "%s" "   - enter sudo password: "
                stty -echo
                read sudopwd
                stty echo

                # password check
                _getroot_var_test=$(printf "%s\\n" "$sudopwd" | sudo -S ls 2>&1)
                _getroot_var_status="$?"
                _getroot_var_not_allowed=$(printf "%s" "$_getroot_var_test" | \
                                         grep -i "sudoers")

                if [ -n "$_getroot_var_not_allowed" ]; then
                    printf "\\n%s %s\\n" "You're not allowed to use sudo," \
                    "get in contact with your local administrator"
                    exit
                fi 

                printf "\\n"
                if [ X"$_getroot_var_status" != X"0" ]; then
                    sudopwd=""
                else
                    sudocmd="sudo -S"
                    break
                fi 
            done

            if [ -z "$sudopwd" ]; then
                printf "%s\\n" "Failed authentication"
                exit
            fi
        else
            printf "%s %s\\n" "You're not root and sudo isn't available." \
            "Please run this script as root!"
            exit
        fi
    fi
}

_fetchrepo()
{   #git clone doesn't support retry, this function fix that
    [ -z "$1" ] && return 1 || _fetchrepo_var_url="$1"
    [ -z "$2" ] || _fetchrepo_var_output="$2"
    _fetchrepo_var_max_retries="10"

    [ -f "$_fetchrepo_var_output" ] && _fetchrepo_var_owner=$(stat -c %U "$_fetchrepo_var_output")

    _fetchrepo_var_i=0
    while [ "$_fetchrepo_var_i" -lt $(expr $_fetchrepo_var_max_retries) ]; do
        _fetch_var_i=$(expr $_fetchrepo_var_i + 1);

        if [ -z "$_fetchrepo_var_output" ]; then
            _waitfor git clone --dept=1 "$_fetchrepo_var_url"
        else
            if [ X"$_fetchrepo_var_owner" = X"$LOGNAME" ]; then
                _waitfor git clone --dept=1 "$_fetchrepo_var_url" \
                    "$_fetchrepo_var_output"
            else
                _waitforsudo git clone --dept=1 "$_fetchrepo_var_url" \
                    "$_fetchrepo_var_output"
            fi
        fi

        if [ -d "./$(basename "$_fetchrepo_var_url" ".git")" ] || \
           [ -d "$_fetchrepo_var_output" ]; then
            break
        else
            if [ $_fetchrepo_var_i -eq $(expr $_fetchrepo_var_max_retries - 1) ]; then
                printf "%s" "Impossible to retrive files"
                exit 1
            else
                _printfs "$_fetchrepo_var_url seems down, retrying in $_fetchrepo_var_i minute(s) ..."
                sleep $(expr $_fetchrepo_var_i \* 60)
                printf "\\n"
            fi
        fi
    done
}

_header()
{
    clear
    _printfl "Ubuntu Loco WWW Setup"
    printf "%b\\n" "\033[1m Site:\033[0m    $site"
    printf "%b\\n" "\033[1m Updates:\033[0m $updates"

    if [ "$(id -u)" != "0" ]; then
        _printfl
    fi
}

_cleanup()
{
    [ "$_cleanup_var_init" ] && return
    _cleanup_var_init="done"

    stty echo
    [ -z "$sudopwd" ] && return

    printf "\\n"
    _printfl "Cleanup"

    [ -z "$1" ] && exit
}

_deploy()
{
    #crontab rutine
    if [ -d "$web"/sites/default ]; then
        if [ "$(id -u)" != "0" ]; then
            printf "%s\\n%s\\n" "crontab: update_deploy failed, not root ($(id -u))" \
                "unable to update /var/www" > "$errorfile"
            exit
        fi
        
        localsite=$(basename "$site")

        if [ -d "$gitweb"/git-"$localsite" ]; then
            cd "$gitweb"/git-"$localsite"
            git pull
            cd -
        else
            git clone --depth=1 "$site.git" "$gitweb"/git-"$localsite"
        fi

        if [ ! -f "$web"/not_override ]; then
            for _deploy_var_file in "$gitweb"/git-"$localsite"/www/*; do
                [ ! -e "$_deploy_var_file" ] && continue
                case $(basename "$_deploy_var_file") in
                    sites) continue ;;
                esac
                _smv "$_deploy_var_file" "$web"
            done
            _smv "$gitweb"/git-"$localsite"/www/.htaccess "$web"
            [ ! -d "$gitweb"/old-"$localsite" ] && mkdir "$gitweb"/old-"$localsite"
            for _deploy_var_file in "$web"/*.old*; do
                [ ! -e "$_deploy_var_file" ] && continue
                mv "$_deploy_var_file" "$gitweb"/old-"$localsite"/
            done
            find "$gitweb"/old-"$localsite"/ -mindepth 1 -maxdepth 1 \
                -mtime +60 -exec rm -rf {} \;
        fi
        exit
    fi
    #end crontab routine

    _printfl "Fixing dependencies"
    _printfs "preseeding mysql root password ..."
    deploy_var_mysql_root_passwd=$(strings /dev/urandom | grep -o '[[:alnum:]]' | head -n 8 | tr -d '\n')
    deploy_var_mysql_drupal_passwd=$(strings /dev/urandom | grep -o '[[:alnum:]]' | head -n 8 | tr -d '\n')

    echo "mysql-server mysql-server/root_password password $deploy_var_mysql_root_passwd" \
        > mysql-server.passwd 
    echo "mysql-server mysql-server/root_password_again password $deploy_var_mysql_root_passwd" \
        >> mysql-server.passwd
    _cmdsudo debconf-set-selections mysql-server.passwd
    _cmd rm -rf mysql-server.passwd

    _printfs "installing deps ..."
    _waitforsudo apt-get update
    _waitforsudo DEBIAN_FRONTEND=noninteractive apt-get install --no-install-recommends -y $apps_install
    _waitforsudo pecl install uploadprogress

    if ! command -v "git" >/dev/null; then
        _die "Dependency step failed"
    fi

    ############################################################################

    _printfl "Downloading site"
    localsite=$(basename "$site")

    [ ! -d "$gitweb" ] && _cmdsudo mkdir "$gitweb"
    [ ! -d "$web" ]    && _cmdsudo mkdir "$web"

    #tmp
    #_cmd wget http://f.javier.io/rep/ubuntu-mx-www.tar.bz2
    #_cmd tar jxf ubuntu-mx-www.tar.bz2
    #_cmdsudo mv ubuntu-mx-www "$gitweb"/git-"$localsite"

    if [ ! -d "$gitweb"/git-"$localsite" ]; then
        _fetchrepo "$site.git" "$gitweb"/git-"$localsite"
    else
        cd "$gitweb"/git-"$localsite"
        printf "%s\\n" "$sudopwd" | $sudocmd git pull >/dev/null 2>&1
        cd -
    fi

    ############################################################################

    _printfl "Installing files"
    for _deploy_var_file in "$gitweb"/git-"$localsite"/www/*; do
        [ ! -e "$_deploy_var_file" ] && continue
        _cmdsudo cp -r "$_deploy_var_file" "$web"
    done

    _cmdsudo cp -r "$gitweb"/git-"$localsite"/www/.htaccess "$web"

    ############################################################################

    _printfl "Configuring apps"
    _printfs "configuring mysql ..."
    _cmd mysql -uroot -p$deploy_var_mysql_root_passwd -e \'create database if not exists drupal\' #'
    _deploy_var_grant=$(echo 'grant all on drupal.* to drupal@localhost identified by "passwd"' \
                       | sed s:passwd:$deploy_var_mysql_drupal_passwd:g)
    _cmd mysql -uroot -p$deploy_var_mysql_root_passwd -e \'$_deploy_var_grant\' #'
    
    _printfs "configuring apache ..."
    _cmdsudo a2enmod rewrite
    _cmdsudo a2enmod headers
    _cmdsudo sed -i -e \\\"/AllowOverride/ \
        s:.*:AllowOverride All:\\\" /etc/apache2/sites-available/default
    echo "extension=uploadprogress.so" > uploadprogress.ini
    _cmdsudo mv uploadprogress.ini /etc/php5/conf.d/
    _cmdsudo service apache2 restart
    _cmdsudo chown -R www-data.www-data /var/www/

    _printfs "configuring cron ..."

    _cmd wget --no-check-certificate "$updates"
    if [ -f $(basename "$updates") ]; then
        _cmd chmod +x $(basename "$updates")
        _cmdsudo mv $(basename "$updates") /usr/local/bin/
        _cmdsudo sed \\\"/deploy/d\\\" /etc/crontab
        #deploy_var_crontab="*/5 \* \* \* \* root /usr/local/bin/deploy"
        #_cmdsudo sed -i -e \\\"\$ a$deploy_var_crontab\\\" /etc/crontab
    fi

    ############################################################################

    _printfl "DONE"
    _deploy_var_ip=$(curl -s ifconfig.me)
    printf "\\n%s\\n\\n" "Browse to $_deploy_var_ip to finish the installation, n@n/"
    printf "%s\\n"    "    > database information:"
    printf "%s\\n"    "      database : drupal"
    printf "%s\\n"    "      user     : drupal"
    printf "%s\\n"    "      passwd   : $deploy_var_mysql_drupal_passwd"
    printf "%s\\n"    "      host     : localhost"
    printf "\\n"
    printf "%s\\n"    "    > for debugging purposes and general administration use:"
    printf "%s\\n"    "      user  : root"
    printf "%s\\n"    "      passwd: $deploy_var_mysql_root_passwd"
    printf "\\n"
}

#####
#main
#####

_header
if _supported; then
    _getroot
    _deploy
else
    printf "%s %s\\n" "FAILED: Non supported distribution system detected," \
            "run this script on $supported systems only"
fi

# vim: set ts=8 sw=4 tw=0 ft=sh : 
